FORM GENERATION
---------------

Form generation library, helps to create a form.


FILES
-----

- application/libraries/oborci/Form.php
- assets/css/oborci/form.css


METHODS
-------

/**
 * Create form open
 * @param array $data Data array
 * @return string HTML form open
 */
public function open($data=NULL)

/**
 * Create form close
 * @param array $data Data array
 * @return string HTML form close
 */
public function close($data=NULL)

/**
 * Create checkbox
 * @param array $data Data array
 * @return string HTML form checkbox
 */
public function checkbox($data=NULL)

/**
 * Create radio button
 * @param array $data Data array
 * @return string HTML form radio
 */
public function radio($data=NULL)

/**
 * Create dropdown
 * @param array $data Data array
 * @return string HTML form dropdown
 */
public function dropdown($data=NULL)

/**
 * Create hidden input
 * @param array $data Data array
 * @return HTML form hidden
 */
public function hidden($data=NULL)

/**
 * Create label
 * @param array $data Data array
 * @return string HTML form label
 */
public function label($data=NULL)

/**
 * Create text input
 * @param array $data Data array
 * @param array $messages Array of error messages
 * @return string HTML form input
 */
public function input($data=NULL, $messages=NULL)

/**
 * Create password input
 * @param array $data Data array
 * @param array $messages Array of error messages
 * @return string HTML form password
 */
public function password($data=NULL, $messages=NULL)

/**
 * Create submit button
 * @param array $data Data array
 * @return string HTML form submit
 */
public function submit($data=NULL)

/**
 * Create reset button
 * @param array $data Data array
 * @return string HTML form reset
 */
public function reset($data=NULL)

/**
 * Create plain button
 * @param array $data Data array
 * @return string HTML form button
 */
public function button($data=NULL)

/**
 * Initialize form, nullify all parameters and start fresh
 */
public function init()

/**
 * Set rules to each field
 * @param array $data Rules array
 */
public function set_rules($data)

/**
 * Set name of the form
 * @param string $data Form name
 */
public function set_name($data)

/**
 * Set action URI of the form.
 * Form will set URI to current_url() and activate auto validation and callback on event on_success
 * when URI is not provided through this method or directly injected on open().
 * @param string $data Form action URI
 */
public function set_uri($data)

/**
 * Set uniquely formatted data structure
 * Usage example: $this->form->set_data($data);
 * @param array $data Data array
 * @return NULL
 */
public function set_data($data)

/**
 * Callback a method or a function when validation process is done and succeeded.
 * This event generated when action URI is not set by set_uri() or directly injected to open()
 * @param array $data Method or function, example: array('$this', 'foo') for method $this->foo
 */
public function set_on_success($data)

/**
 * Render form
 * Usage example: return $this->form->render();
 * @return string $returns HTML form
 */
public function render()


USAGE EXAMPLES
--------------

function __construct() {
        parent::__construct();
        $this->load->library(array('oborci/Form'));
}

public function adduser() {
        // always init the form
        $this->form->init();

        // give a name to this form
        $this->form->set_name('user_add');
        
        // set validation rules
        $this->form->set_rules(
           array(
           'email' => array('required', array('max_length' => 200), 'email'),
           'first' => array('required', array('max_length' => 50), 'trim'),
           'last' => array(array('max_length' => 50), 'trim')));

        // pass inputs on success inputs validation to __CLASS__::_save_form()
        $this->form->set_on_success(array(__CLASS__, '_save_form'));

        // the form
        $this->form->open();
        $this->form->input(array('name' => 'email', 'label' => 'Email'));
        $this->form->input(array('name' => 'first', 'label' => 'First name'));
        $this->form->input(array('name' => 'last', 'label' => 'Last name'));
        $this->form->submit(array('value' => 'Add User'));
        $this->form->close();

        // the generated HTML form
        $form = $this->form->render();

        // pass the HTML form to a view
        $this->load->view('adduser_view', $form);
}

// this method should be public
public  function _save_form($inputs) {
        // IMPORTANT! you need to get instance
        $CI =& get_instance();
        
        // save inputs to oci_users object (has actual insert query)
        $CI->oci_users->insert($inputs);
        
        // you can redirect immediately after saving inputs if you need to
        // redirect(current_url());
        
        // or simply returns something and let form render() returns it as well
        $ret = '<p>'.t('User has been added').'</p>';
        $ret .= '<p>'.  anchor(current_url(), 'Back', 'title="Back"').'</p>';

        return $ret;
}



--
Anton Raharja
110529
