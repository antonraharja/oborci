ENRICHED MODEL
--------------

Enriched CI_Model with database related functions for CRUD and table relation.


FILES
-----

- application/libraries/Oborci_Model.php
- application/helpers/translate_helper.php


RELATIONS
---------
- belongs_to
- has_one
- has_many
- has_and_belongs_to_many

Please read: http://guides.rubyonrails.org/association_basics.html

Example:
1. Blog relation:
        - tbl_users --> tbl_posts --> tbl_comments
                - a user has many posts
                - a post has many comments
                - a comment belongs to a post
                - a post belongs to a user
2. Contact relation:
        - tbl_users <--> tbl_users_contacts <--> tbl_contacts
                - a user has and belongs to many contacts
                - a contact has and belongs to many user
3. User and preferences:
        - tbl_users --> tbl_preferences
                - a user belongs_to a preferences
                - a preferences has_one user


METHODS
-------

/**
 * Insert a new data to database
 * @param array $data Array of data to be inserted to database
 * @return integer|boolean Last inserted ID or FALSE when failed
 */
public function insert($data)

/**
 * Get specific data when ID is given
 * @param integer $id ID
 * @return object CI active record query containing data items
 */
public function get($id)

/**
 * Get all data
 * @return object CI active record query containing data items
 */
public function get_all()

/**
 * Get data by partial fields and its value
 * @param array $field_value Array of fields and its value
 * @return object CI active record query containing data items
 */
public function get_where($field_value)

/**
 * Get one data by partial fields and its value
 * @param array $field_value Array of fields and its value
 * @return object CI active record query containing data item
 */
public function get_one($field_value)

/**
 * Get from relation table with various relation type
 * @param string $model Foreign model
 * @param array $field_value Search criteria
 * @return object CI active record query containing data items
 */
public function get_from($model, $field_value)

/**
 * Update data
 * @param integer $id ID
 * @param array $data Array of data to be updated
 * @return boolean TRUE if update success
 */
public function update($id, $data)

/**
 * Update all data
 * @param array $data Array of data to be updated
 * @return boolean TRUE if update success
 */
public function update_all($data)

/**
 * Update data by partial fields and its value
 * @param array $field_value Array of fields and its value
 * @param array $data Array of data to be updated
 * @return boolean TRUE if update success
 */
public function update_where($field_value, $data)

/**
 * Delete data
 * @param integer $id ID
 * @return boolean TRUE if deletion success
 */
public function delete($id)

/**
 * Delete all data
 * @return boolean TRUE if deletion success
 */
public function delete_all()

/**
 * Delete data by partial fields and its value
 * @param integer $field_value Array of fields and its value
 * @return boolean TRUE if deletion success
 */
public function delete_where($field_value)


USAGE EXAMPLES
--------------

oci_users Model:

// instead extending CI_Model, we need to extend Oborci_Model
class oci_users extends Oborci_Model {

	protected $db_table = 'oci_users';
        
        protected $db_fields = array(
            // map => field
            'id' => 'id',
            'role' => 'role_id',
            'preferences' => 'preference_id',
            'username' => 'username',
            'password' => 'password',
            'salt' => 'salt',
        );
        
        protected $db_primary_key = 'id';
        
        protected $db_relations = array(
            // with oci_roles we have belongs_to relation on (mapped) key 'role'
            // belongs_to: each of us have one of them
            'oci_roles' => array(
                'relation' => 'belongs_to',
                'foreign_key' => 'role',
            ),
            // with oci_preferences we have belongs_to relation on (mapped) key 'preferences'
            // belongs_to: each of us have one of them
            'oci_preferences' => array(
                'relation' => 'belongs_to',
                'foreign_key' => 'preferences'
            ),
        );

}

a controller utilizing oci_users and oci_roles model:

class Test extends CI_Controller {

	function __construct() {
		parent::__construct();
                $this->load->model(array(
                    'oborci/oci_users',
                    'oborci/oci_roles',
                    'oborci/oci_preferences',
                    ));
	}

	/**
	 * Index Page for this controller.
	 * 
	 */
	public function index($param=NULL) {
                // get roles from oci_roles with users username is manager
                // each of user have one role
                $query = $this->oci_users->get_from('oci_roles', array('username' => 'manager'));
                print_r($query->result_array());

                // get roles from oci_preferences with users username is manager
                // each of user have one preferences
                $query = $this->oci_users->get_from('oci_preferences', array('username' => 'manager'));
                print_r($query->result_array());
        }

}

Notes:
- translate_helper should be autoloaded, or do not use it ( t($string) )



--
Anton Raharja
110529
